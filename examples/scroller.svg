<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Scroller Interface</title>
  <defs>
    <script type='application/javascript' xlink:href='.../lib/jquery/jquery.js'></script>
    <script type='application/javascript' xlink:href='.../lib/strophe/strophe.js'></script>

    <script type="application/javascript" xlink:href=".../lib/tip/Array.each.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>

    <script type="application/javascript"><![CDATA[
        var win = { width: window.innerWidth,
                    height: window.innerHeight, }
        var viewBox = [ - win.width / 2, - win.height / 2, win.width, win.height ].join( ' ' )
        $.__.$( '#' ).attr( 'viewBox', viewBox )
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var $work = $.__.$( '<g/>' ).css( 'visibility', 'hidden' )
        $.__.$( '#' ).append( $work )
        var pad = { top: 5, between: 5, bottom: 5, left: 5, right: 5 }
        var display = {
            JSON: function( obj ) {
                var lines = []
                var container = ( function() {
                    var $container = $.__.$( '<g/>' )
                    var transform = {
                        x: 0,
                        y: 0,
                        update: function() {
                            $container.attr( 'transform',
                                             'translate(' + this.x + ',' + this.y + ')' )
                        },
                    }
                    return {
                        add: function( $elem ) { $container.append( $elem ) },
                        get $root() { return $container },
                        get transform() { return {
                            set x( x ) {
                                transform.x = x
                                transform.update()
                            },
                            set y( y ) {
                                transform.y = y
                                transform.update()
                            },
                        } },
                    }
                } )()
                
                $work.append( container.$root )
                var max = { width: 0 }
                obj.each( function( line ) {
                    lines.push( ( function() {
                        var $text = ( $.__.$( '<html:input/>' )
                                      .attr( 'class', 'value' )
                                      .attr( 'value', line ) )
                        var $obj = ( $.__.$( '<foreignObject/>' )
                                     .append( $text ) )
                        container.add( $obj )
                        var port = {
                            get width() { return $text.width() + 7 },
                            get height() { return $text.height() + 7 },
                            set x( x ) { $obj.attr( 'x', x ) },
                            set y( y ) { $obj.attr( 'y', y ) },
                            get text() { return $text.text() },
                            set text( text ) { $text.text( text ) },
                        }
                        $obj.attr( {
                            x: - port.width / 2,
                            y: 0,
                            width: port.width,
                            height: port.height,
                        } )
                        return port
                    } )() )
                    max.width = Math.max( lines[-1].width, max.width )
                } )
                var y = pad.top
                lines.each( function( line ) {
                    line.y = y
                    y += line.height + pad.between
                } )
                y -= pad.between - pad.bottom
                container.transform.y = - y / 2
                $('#body').append( container.$root )
            },
        }
        $( function() {
            display.JSON( [ 1, 2, 3 ] )
        } )
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var connection
        var BOSH_SERVICE = '/http-bind/'
        
        function log( msg ) {
            $('#log').text( msg )
        }

        function onConnect( status ) {
            if( status == Strophe.Status.CONNECTING ) {
	        log('Strophe connecting')
            } else if( status == Strophe.Status.CONNFAIL ) {
	        log( 'Strophe connect failed' )
            } else if( status == Strophe.Status.DISCONNECTING ) {
	        log( 'Strophe disconnecting' )
            } else if( status == Strophe.Status.DISCONNECTED ) {
	        log( 'Strophe disconnected' )
            } else if( status == Strophe.Status.CONNECTED ) {
	        log( 'Strophe connected' )
                connection.send( $pres().tree() )
	        setTimeout( "connection.disconnect()", 1500 )
            }
        }
        
        $( function() {
            connection = new Strophe.Connection( BOSH_SERVICE )
            connection.rawInput = log
            connection.rawOutput = log

            $('#connect').bind( 'click', function() {
	        connection.connect( "bob@localhost",
			            "bob'spass",
			            onConnect )
            } )
        } )
    ]]></script>
    <style type="text/css">
    #log { text-anchor: middle }
input { text-align: center; padding: auto }
    </style>
  </defs>
    <g id="body"/>
</svg>
