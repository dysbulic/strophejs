<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="0 0 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Scroller Interface</title>
  <defs>
      <script type="text/javascript"><![CDATA[
        var def = { userId : '例如' }
      ]]></script>
      <script type="text/javascript" xlink:href=".../lib/tip/pointers.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/Array.each.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/MutableString.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/List.js"/>
      
      <script type="text/javascript" xlink:href=".../lib/jquery/jquery.js"/>
      <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>

      <style type="text/css">
      </style>
      <!---->
      <script type="text/javascript"><![CDATA[
          var state = new List( {
              'tixel.capture.frequency.mHz' : .1 * 1000,
          } )
          ;
          ( function() {
              //var state′ = new Suplist( state )
              state.__.set( {
                  'connection.username' : 'mimis.test@gmail.com',
                  'connection.password' : 'mimistest',
                  'connection.server' : 'talk.google.com',
              } )
          } )()

          function Box() {
              this.$rect = $.__.$('<rect x="25" y="25" width="50" height="50" rx=".5" ry=".5"/>')
              this.__defineGetter__( 'width', function() { return this.$rect.attr( 'width' ) } )
              this.__defineSetter__( 'width', function(val) { return this.$rect.attr( 'width', val ) } )
          }

          var box = new Box()
          $.__.$('#').append( box.$rect )

          var scene = new List()
          ;
          ( function() {
              var interval = {
                  id: undefined,
              }

          scene.__defineGetter__( 'once', function() {
              console.log( 'scene.get.once' )
              return 3
          } )

              function once() {
                  console.log( 'Starting: once' )
                  // ToDo: capture metrics about execution times
                  //        and attempt to learn impression.display.time
                  //        which is the time that the first 'display'
                  //        event will pass through
                  state.set( {
                      'impression.configuration.time' : ( new Date() ).getTime(),
                      'impression.display.time' : ( new Date() ).getTime() + 20,
                      'impression.state' : 'configuration',
                  } )
                  do {
                      state.set( {
                          'impression.configuration.done' : true,
                      } )
                      this.__.impress.apply( state )
                  } while( ! state.get( 'impression.configuration.done' ) )
                  state.copy( 'impression.display.time', '.predicted' )
                  state.set( {
                      'impression.display.time' : ( new Date() ).getTime(),
                      'impression.configuration.time' : (
                          ( new Date() ).getTime() + state.get( 'tixel.capture.frequency.mHz' )
                      ),
                      'impression.state' : 'display',
                  } )
                  do {
                      state.set( {
                          'impression.display.done' : true
                      } )
                      this.__.impress.apply( state )
                  } while( ! state.get( 'impression.display.done' ) )
                  return state
              }
              
              scene.__defineGetter__( 'go', function() {
                  if( interval.id === undefined ) {
                      interval.id =
                          setInterval( once,
                                       state.get( 'tixel.capture.frequency.mHz' ) )
                  }
                  return this
              } )
              scene.__defineGetter__( 'stop', function() {
                  if( interval.id !== undefined ) {
                      clearInterval( interval.id )
                      interval.id = undefined
                  }
                  return this
              } )
          } )
            
          scene.__.add( {
              impress : function( state ) {
                  box.width = 25
              },
          } )
          console.log( 'script.once = ' + scene.once )
      ]]></script>
      <style type="text/css">
        rect { fill: #F0F0F0; fill-opacity: .75;
               stroke-width: .3; stroke: black; stroke-opacity: .5 }
      </style>
  </defs>
  <g class="box">
    
  </g>
</svg>
