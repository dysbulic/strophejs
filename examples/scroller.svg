<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Scroller Interface</title>
  <defs>
    <script type='application/javascript' xlink:href='.../lib/jquery/jquery.js'></script>
    <script type='application/javascript' xlink:href='.../lib/strophe/strophe.js'></script>

    <script type="application/javascript" xlink:href=".../lib/tip/Array.each.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/List.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>

    <script type="application/javascript"><![CDATA[
        var win = { width: window.innerWidth,
                    height: window.innerHeight, }
        var viewBox = [ - win.width / 2, - win.height / 2, win.width, win.height ].join( ' ' )
        $.__.$( '#' ).attr( 'viewBox', viewBox )
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Container() {
            var $container = $.__.$( '<g/>' )
            var transform = {
                x: 0,
                y: 0,
                update: function() {
                    $container.attr( 'transform',
                                     'translate(' + this.x + ',' + this.y + ')' )
                },
            }

            this.add = function( $elem ) { $container.append( $elem ) }
            this.__defineGetter__( '$root', function() { return $container } )
            this.__defineGetter__( 'transform', function() { return {
                set x( x ) {
                    transform.x = x
                    transform.update()
                },
                set y( y ) {
                    transform.y = y
                    transform.update()
                },
            } } )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var $work = $.__.$( '<g/>' ).css( 'visibility', 'hidden' )
        $.__.$( '#' ).append( $work )
        var pad = { top: 5, between: 5, bottom: 5, left: 5, right: 5 }
        var display = {
            JSON: function( list ) {
                var lines = []
                var container = new Container()
                $work.append( container.$root )

                var max = { width: 0 }
                list.__.each( function( line, id ) {
                    lines.push( ( function() {
                        var $text = ( $.__.$( '<html:input/>' )
                                      .attr( 'class', 'value' )
                                      .attr( 'value', line ) )
                        var $lbl = ( $.__.$( '<html:input/>' )
                                      .attr( 'class', 'label' )
                                      .attr( 'value', id ) )

                        var $obj = {
                            $text: ( $.__.$( '<foreignObject/>' )
                                     .append( $text ) ),
                            $lbl: ( $.__.$( '<foreignObject/>' )
                                    .append( $lbl ) ),
                        }
                            
                        var $bg = $.__.$( '<rect/>' )

                        container.add( $bg )
                        container.add( $obj.$text )
                        container.add( $obj.$lbl )
                        var port = {
                            get width() { return (
                                parseFloat( $text.width() )
                                    + parseFloat( $text.css( 'padding-left' ) )
                                    + parseFloat( $text.css( 'padding-right' ) )
                                    + parseFloat( $text.css( 'border-left-width' ) )
                                    + parseFloat( $text.css( 'border-right-width' ) )
                            ) },
                            get height() { return (
                                parseFloat( $text.height() )
                                    + parseFloat( $text.css( 'padding-top' ) )
                                    + parseFloat( $text.css( 'padding-bottom' ) )
                                    + parseFloat( $text.css( 'border-top-width' ) )
                                    + parseFloat( $text.css( 'border-bottom-width' ) )
                            ) },
                            set x( x ) {
                                $obj.$text.attr( 'x', x )
                                $obj.$lbl.attr( 'x', x )
                                $bg.attr( 'x', x )
                            },
                            set y( y ) {
                                $obj.$text.attr( 'y', y )
                                $obj.$lbl.attr( 'y', y )
                                $bg.attr( 'y', y )
                            },
                            get text() { return $text.text() },
                            set text( text ) { $text.text( text ) },
                        }

                        var size = {
                            x: - port.width / 2,
                            y: 0,
                            width: port.width,
                            height: port.height,
                        } 
                        $obj.$text.attr( size )
                        $obj.$lbl.attr( size )
                        $bg.attr( size )

                        $lbl.hover( function() {
                                       alert('on')
                                   },
                                   function() {
                                       alert( 'off' )
                                   } )

                        return port
                    } )() )
                    max.width = Math.max( lines[-1].width, max.width )
                } )
                var y = pad.top
                lines.each( function( line ) {
                    line.y = y
                    y += line.height + pad.between
                } )
                y -= pad.between - pad.bottom
                container.transform.y = - y / 2
                $('#body').append( container.$root )
            },
        }
        $( function() {
            display.JSON( new List( {
                username: 'bob@localhost',
                password: 'bob\'spass',
                connect: function() {
                },
            } ) )
        } )
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var connection
        var BOSH_SERVICE = '/http-bind/'
        
        function log( msg ) {
            $('#log').text( msg )
        }

        function onConnect( status ) {
            if( status == Strophe.Status.CONNECTING ) {
	        log('Strophe connecting')
            } else if( status == Strophe.Status.CONNFAIL ) {
	        log( 'Strophe connect failed' )
            } else if( status == Strophe.Status.DISCONNECTING ) {
	        log( 'Strophe disconnecting' )
            } else if( status == Strophe.Status.DISCONNECTED ) {
	        log( 'Strophe disconnected' )
            } else if( status == Strophe.Status.CONNECTED ) {
	        log( 'Strophe connected' )
                connection.send( $pres().tree() )
	        setTimeout( "connection.disconnect()", 1500 )
            }
        }
        
        $( function() {
            connection = new Strophe.Connection( BOSH_SERVICE )
            connection.rawInput = log
            connection.rawOutput = log

            $('#connect').bind( 'click', function() {
	        connection.connect( "bob@localhost",
			            "bob'spass",
			            onConnect )
            } )
        } )
    ]]></script>
    <style type="text/css">
    rect { fill: blue }
    #log { text-anchor: middle }
input { text-align: center; padding: auto; }
foreignObject { overflow: visible; }
[class~='value'] { background-color: transparent }
    </style>
  </defs>
    <g id="body"/>
</svg>
