<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Scroller Interface</title>
  <defs>
      <script type="text/javascript"><![CDATA[
        var def = { userId : '例如' }
      ]]></script>
      <script type="text/javascript" xlink:href=".../lib/tip/pointers.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/Array.each.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/MutableString.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/List.js"/>
      
      <script type="text/javascript" xlink:href=".../lib/jquery/jquery.js"/>
      <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>

      <style type="text/css">
      </style>
      <!---->
      <script type="text/javascript"><![CDATA[
          var state = new List( {
              'tixel.capture.frequency.mHz' : .01 * 1000,
          } )
          ;
          ( function() {
              //var state′ = new Suplist( state )
              state.__.set( {
                  'connection.username' : 'mimis.test@gmail.com',
                  'connection.password' : 'mimistest',
                  'connection.server' : 'talk.google.com',
              } )
          } )()

          function Box() {
              this.$base = $.__.$('<rect/>')
              this.$base.append(
                  this.$rect = $.__.$('<rect/>')
              )
              this.__defineGetter__( 'width', function() {
                  return this.$rect.attr( 'width' )
              } )
              this.__defineSetter__( 'width', function(val) {
                  this.$rect.attr( 'x', -val / 2 )
                  return this.$rect.attr( 'width', val )
              } )
              this.__defineGetter__( 'height', function() {
                  return this.$rect.attr( 'height' )
              } )
              this.__defineSetter__( 'height', function(val) {
                  this.$rect.attr( 'y', -val / 2 )
                  return this.$rect.attr( 'height', val )
              } )
          }
          var label = new Box()
          $.__.$('#').append( label.$base )
          label.$base.data( 'state', new List() )
          label.$base.data( 'tx', function() {
              console.log( 'tx:' + this.__.get( 'caller' ) )
          } )

          function exec( ) {
              var state = $('this').data( 'state' )
              if( state && state.__ && typeof state.__.set == 'function' ) {
                  state.__.set( 'caller', this )
              }
              state = state || {}
              var tx = $('this').data( 'tx' )
              if( typeof tx == 'function'
                  && tx != undefined ) {
                  tx.apply( state, arguments )
              }
              console.log(this.nodeName)
          }
          $.__.$('#').each( function traverse( ) {
              exec.apply( this, arguments )
              $(this).children().each( traverse ) 
          } )

          $work = ( $.__.$('<g class="holder"/>')
                    .css({ 'visibility' : 'hidden' }) )
          $.__.$('#').append( $work )

          var tixels = this.__.get( 'tixels' )
          if( tixels.__.count == 0 ) {
              var str = 'Hello World'
              var $txt = $('<text/>')
              $work.append( $txt )
              var bboxes = []
              for( var i = 1; i < str.length; i++ ) {
                  $txt.text( str.substring( 0, i ) )
                  bboxes[ i ] = $txt.get(0).getBBox()
              }
              $txt.data( 'bboxes', bboxes )
              
              tixels.__.add( {
                  time : {
                      start : new Date().getTime(),
                      delta : .1,
                      set display( offset ) {
                          if( ! this.runBefore ) {
                              this.runBefore = true
                              this.$base.append( $txt )
                          }
                                  
                      },
                  },
              } )
          }
      ]]></script>
      <style type="text/css">
        rect { fill: #F0F0F0; fill-opacity: .75;
               stroke-width: .3; stroke: black; stroke-opacity: .5 }
      </style>
  </defs>
  <g class="box">
    
  </g>
</svg>
