<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Scroller Interface</title>
  <defs>
      <script type="text/javascript"><![CDATA[
        var def = { userId : '例如' }
      ]]></script>
      <script type="text/javascript" xlink:href=".../lib/tip/pointers.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/Array.each.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/MutableString.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/List.js"/>
      <script type="text/javascript" xlink:href=".../lib/tip/scene.js"/>
      
      <script type="text/javascript" xlink:href=".../lib/jquery/jquery.js"/>
      <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>

      <style type="text/css">
    text { text-anchor: middle }
      </style>
      <!---->
      <script type="text/javascript"><![CDATA[
          var state = new List( {
              'tixel.capture.frequency.mHz' : .01 * 1000,
          } )
          ;
          ( function() {
              //var state′ = new Suplist( state )
              state.__.set( {
                  'connection.username' : 'mimis.test@gmail.com',
                  'connection.password' : 'mimistest',
                  'connection.server' : 'talk.google.com',
              } )
          } )()

          function Box() {
              this.$base = $.__.$('<g class="box"/>')
              this.$base.append(
              )
          }

          $work = ( $.__.$('<g class="holder"/>')
                    .css({ 'visibility' : 'hidden' }) )
          $.__.$('#').append( $work )

          var label = new Box()
          $.__.$('#').append( label.$base )

          label.$base.data( 'config', function() {
              var str = this.str = 'Hello World'
              var $txt = this.$txt = this.$txt || $.__.$('<text/>')
              var $bg = this.$bg = $.__.$('<rect/>')
              this.time = this.time || {}
              this.time.now = this.__.get( 'time.impression.display.predicted' )
              this.time.start = this.time.start || ( new Date() ).getTime()
              if( ! this.bboxes ) {
                  $txt.__defineSetter__( 'y', function(val) {
                      this.attr( 'y', val )
                  } )

                  this.$bg.__defineGetter__( 'width', function() {
                      return this.attr( 'width' )
                  } )
                  this.$bg.__defineSetter__( 'width', function(val) {
                      this.attr( 'x', -val / 2 )
                      return this.attr( 'width', val )
                  } )
                  this.$bg.__defineGetter__( 'height', function() {
                      return this.attr( 'height' )
                  } )
                  this.$bg.__defineSetter__( 'height', function(val) {
                      this.attr( 'y', -val / 2 )
                      return this.attr( 'height', val )
                  } )


                  this.$parent.append( $txt )
                  var bboxes = []
                  var max = this.max = { width : 0, height : 0 }
                  for( var i = 1; i <= str.length; i++ ) {
                      $txt.text( str.substring( 0, i ) )
                      bboxes[ i ] = $txt.get(0).getBBox()
                      ;[ 'width', 'height' ].each( function( prop ) {
                          max[ prop ] = Math.max( max[ prop ], bboxes[ i ][ prop ] )
                      } )
                  }
                  this.bboxes = bboxes
              }
              this.time.offset = this.time.now - this.time.start

              this.props = new List()
              if( this.time.offset <= 4000 ) {
                  var offset = Math.min( 1, this.time.offset / 3000 )
                  this.props.__.add( 'height', this.max.height * offset )
              }
              if( this.time.offset < 11000 ) {
                  var offset = Math.min( 1, this.time.offset / 10000 )
                  this.props.__.add( 'width', this.max.width * offset )
              }

              var i, done
              for( i = 1, done = false; ! done && i < this.bboxes.length; i++ ) {
                  done = ( this.bboxes[ i ].width > $bg.width
                           || this.bboxes[ i ].height > $bg.height )
              }
              if( i != this.__.get( 'last.bbox.idx' ) ) {
                  this.props.__.add( 'text', this.str.substring( 0, i - 1 ) )
                  this.__.set( 'last.bbox.idx', i )
              }

          } )

          label.$base.data( 'display', function() {
              this.props && this.props.each( function( prop, val ) {
                  switch( prop ) {
                  case 'max.height':
                      this.$txt.y = this.max.height / 2
                      break
                  case 'height': case 'width':
                      this.$bg[ prop ] = val
                      break
                  case 'text':
                      this.$txt.text( val )
                      break
                  }
              } )
          } )

          scene.go
      ]]></script>
      <style type="text/css">
        rect { fill: #F0F0F0; fill-opacity: .75;
               stroke-width: .3; stroke: black; stroke-opacity: .5 }
      </style>
  </defs>
  <g class="box">
    
  </g>
</svg>
