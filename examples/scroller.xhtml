<!DOCTYPE html PUBLIC
  "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Scroller Interface</title>
  <script type="application/javascript" src=".../lib/jquery/jquery.js"/>
  <script type="application/javascript" src=".../lib/strophe/strophe.js"/>
  <script type="application/javascript" src="scroller.jquery"/>
  <script type="application/javascript"><![CDATA[
      var root = document.documentElement

      function Position( start, end ) {
          this.__defineGetter__( 'now', function() {
              var offset =
                  Math.min(
                      1,
                      ( ( ( new Date() ).getTime() - start.time )
                        / ( end.time - start.time ) )
                  )
              return {
                  x : offset * ( end.x - start.x ),
                  y : offset * ( end.y - start.y ),
              }
          } )
      }

      function Animatable() {
          var self = this
          var args = Array.prototype.slice.call( arguments )

          this.interval = {
              id: undefined,
          }

          this.__defineGetter__( 'go', function() {
              if( this.interval.id === undefined ) {
                  this.interval.id =
                      setInterval(
                          function() {
                              arguments.callee.apply(
                                  self, args
                              )
                          },
                          this.interval.length
                      )
              }
          } )
          this.__defineGetter__( 'stop', function() {
              if( this.interval.id !== undefined ) {
                  clearInterval( this.interval.id )
                  
              }
          } )
      }
      
      function Scroller( state ) {
          this.interval = $.merge(
              this.interval || {},
              { length: 30 /* seconds */ * 1000, }
          )

          var win = state['win']
          var start = state['start']
          var canvas = {
              width : root.scrollWidth,
              height : root.scrollHeight,
          }
          var end = $.merge( {
              time : ( start.time
                       + this.interval.length )
            },
            ( {
                get top() { return {
                    get left() { return {
                        x : win.width / 2,
                        y : win.height / 2,
                    } },
                    get right() { return {
                        x : cvs.width - win.width / 2,
                        y : win.height / 2,
                    } },
                } },
                get bottom() { return {
                    get left() { return {
                        x : win.width / 2,
                        y : cnvs.height - win.height / 2,
                    } },
                    get right() { return {
                        x : cnvs.width - win.width / 2,
                        y : cnvs.height - win.height / 2,
                    } },
                } }
            } ).bottom.left
          )
      }

      /*
       * document.documentElement.addEventListener( 'DOMAttrModified', function( evt ) {
       *   log( evt )
       * }, false )
       *
       * There is no event callback for changes in scroll size, so it is necessary to poll
       */

      var state = {
          scroller : undefined,
          top : root.scrollTop,
          left : root.scrollLeft,
      }
      function ScrollWatcher() {
          var current = {
              top : root.scrollTop,
              left : root.scrollLeft,
          }
              
          if( current.top !== state.top
              || current.left !== state.left ) {
              if( state.scroller === undefined ) {
                  var win = {
                      width : root.clientWidth,
                      height : root.clientHeight,
                  }
                  state.scroller = new Scroller( {
                      win : win,
                      start : {
                          x : ( root.scrollLeft
                                + win.width / 2 ),
                          y: ( root.scrollTop
                               + win.height / 2 ),
                          width: win.width,
                          height: win.height,
                          time : ( new Date() ).getTime(),
                      }
                  } )
              }
          }
      }


      $( function() {
          $(document.documentElement).attr( 'id', 'root' )
          $('body').append( $('<p/>').css( { 'margin-top' : '2000px' } ).text( 'test' ) )
      } )
  ]]></script>
  <style type="text/css">
    html, body { margin: 0; min-height: 200px }
    form { float: left }
    label:after { content: ":" }
    label { display: inline-block; min-width: 5.5em; text-align: right }
    li:last-child button { float: right }
    li { list-style: none; padding: .1em 0 }
    body > ol { margin: 0; padding: 0 }
    body > ol > li:before, body > ol > li:after {
      content: ''; clear: both; display: block
    }
    body > ol > li { border-style: double none; padding: 1em;
                     border-width: 3px; margin-top: -3px }
    body > ol > li:first-child { margin-top: 3px; border-color: blue }
  </style>
</head>
<body>
  <ol id="log"/>
  <ol id="action">
    <li>
      <form id="connect" action="">
        <fieldset>
          <legend>XMPP Connect?</legend>
          <ul>
            <li>
              <label for="user"><acronym title="identifier">ID</acronym></label>
              <input id="user" type="text" value="mimis.test@gmail.com" />
            </li>
            <li>
              <label for="server">Server</label>
              <input id="server" type="text" value="talk.google.com" />
            </li>
            <li>
              <label for="pass">Password</label>
              <input id="pass" type="password" value="mimistest" />
            </li>
          </ul>
        </fieldset>
      </form>
    </li>
  </ol>
</body>
</html>
