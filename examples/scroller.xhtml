<!DOCTYPE html PUBLIC
  "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Scroller Interface</title>
  <script type="application/javascript" src=".../lib/jquery/jquery.js"/>
  <script type="application/javascript" src=".../lib/strophe/strophe.js"/>
  <script type="application/javascript" src=".../lib/tip/Array.each.js"/>
  <script type="application/javascript" src=".../lib/tip/pointers.js"/>
  <script type="application/javascript" src=".../lib/tip/List.js"/>

  <script type="application/javascript" src="scroller.jquery"/>
  <script type="application/javascript"><![CDATA[
      ( function() {
          var root = document.documentElement

          // Linear translation between two tixels
          var position = {
              linear : function ( start, end ) {
                  var current = { time : ( new Date() ).getTime() }
                  var offset =
                      Math.min(
                          1,
                          ( ( current.time - start.time )
                            / ( end.time - start.time ) )
                      )
                  return {
                      offset: offset,
                      x : start.x + offset * ( end.x - start.x ),
                      y : start.y + offset * ( end.y - start.y ),
                      done : offset === 1, 
                  }
              },
          }
          
          function snapshot( ) {
              var moveTo = position.linear( this.start, this.end )
              console.log( 'snap:' + Math.round( moveTo.offset * 10000 ) / 100 + '%:'
                  + ':<' + moveTo.x + ',' + moveTo.y + '>' )
              window.scroll( moveTo.x - this.win.width / 2,
                             moveTo.y - this.win.height / 2 )
              if( moveTo.done ) {
                  this.start = undefined
              }
          }
          
          function Scene( ) { // saccade
              var self = this
              var args = Array.prototype.slice.call( arguments )
              var watcher = args.shift()

              var state = {
                  top : root.scrollTop,
                  left : root.scrollLeft,
                  width : root.scrollWidth,
                  height : root.scrollHeight,
              }
              
              var interval = {
                  id: undefined,
                  length: .1 /* seconds */ * 1000,
              }
              
              function once() {
                  watcher.apply( state, args )
                  return this
              }

              this.__defineGetter__( 'once', once )
              this.__defineGetter__( 'go', function() {
                  if( interval.id === undefined ) {
                      interval.id =
                          setInterval( once, interval.length )
                  }
                  return this
              } )
              this.__defineGetter__( 'stop', function() {
                  if( interval.id !== undefined ) {
                      clearInterval( interval.id )
                      interval.id = undefined
                  }
                  return this
              } )
          }
      
          function watcher( ) {
              var scroll = { interval : 3 /* seconds */ * 1000, }
              var current = new List( {
                  top : root.scrollTop,
                  left : root.scrollLeft,
                  width : root.scrollWidth,
                  height : root.scrollHeight,
              } )

              var change = false
              var state = this
              try {
                  current.__.each( function( attr, name ) {
                      if( state[name] !== attr ) {
                          throw name
                      }
                  } )
              } catch( name ) {
                  //console.log( 'dirty:' + name + ':' + current[name] + ':' + state[name] )
                  change = true
              }

              if( change || this.start ) {
                  this.win = {
                      width : root.clientWidth,
                      height : root.clientHeight,
                  }
                  if( this.start === undefined ) {
                      this.start = {
                          x : ( current.left
                                + state.win.width / 2 ),
                          y : ( current.top
                                + state.win.height / 2 ),
                          width : state.win.width,
                          height : state.win.height,
                          time : ( new Date() ).getTime(),
                      }
                  }
                  var end = ( {
                      get top() { return {
                          get left() { return {
                              x : state.win.width / 2,
                              y : state.win.height / 2,
                          } },
                          get right() { return {
                              x : current.width - state.win.width / 2,
                              y : state.win.height / 2,
                          } },
                      } },
                      get bottom() { return {
                          get left() { return {
                              x : state.win.width / 2,
                              y : current.height - state.win.height / 2,
                            } },
                          get right() { return {
                              x : current.width - state.win.width / 2,
                              y : current.height - state.win.height / 2,
                          } },
                      } }
                  } ).bottom.left
                  end.time = this.start.time + scroll.interval
                  this.end = end
                  snapshot.apply( this, arguments )

                  current.__.each( function( attr, name ) {
                      state[name] = attr
                  } )
              }
          }
           
          $( function() {
              var scene = new Scene( watcher ).go
              $('body').append( $('<p/>').css( { 'margin-top' : '2000px' } ).text( 'test' ) )
          } )
      } )()
  ]]></script>
  <style type="text/css">
    html, body { margin: 0; min-height: 200px }
    form { float: left }
    label:after { content: ":" }
    label { display: inline-block; min-width: 5.5em; text-align: right }
    li:last-child button { float: right }
    li { list-style: none; padding: .1em 0 }
    body > ol { margin: 0; padding: 0 }
    body > ol > li:before, body > ol > li:after {
      content: ''; clear: both; display: block
    }
    body > ol > li { border-style: double none; padding: 1em;
                     border-width: 3px; margin-top: -3px }
    body > ol > li:first-child { margin-top: 3px; border-color: blue }
  </style>
</head>
<body>
  <ol id="log"/>
  <ol id="action">
    <li>
      <form id="connect" action="">
        <fieldset>
          <legend>XMPP Connect?</legend>
          <ul>
            <li>
              <label for="user"><acronym title="identifier">ID</acronym></label>
              <input id="user" type="text" value="mimis.test@gmail.com" />
            </li>
            <li>
              <label for="server">Server</label>
              <input id="server" type="text" value="talk.google.com" />
            </li>
            <li>
              <label for="pass">Password</label>
              <input id="pass" type="password" value="mimistest" />
            </li>
          </ul>
        </fieldset>
      </form>
    </li>
  </ol>
</body>
</html>
