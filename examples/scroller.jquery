function log( level, msg ) {
    msg = msg || level
    if( ( msg && msg.length > 0
          && typeof level == 'number'
          && level >= Strophe.LogLevel.INFO ) ) {
        $('#log, body ol').eq( 0 ).append(
            $('<li/>').text( level )
        )
    }
}

var speed = 100

$( function () {
    function rawInput( ) {
        var data = Array.prototype.slice.call( arguments ).join()
        log( Strophe.LogLevel.DEBUG,
             '⍟: ' + data )
    }

    function rawOutput( ) {
        var data = Array.prototype.slice.call( arguments ).join()
        log( Strophe.LogLevel.DEBUG,
             '⋆: ' + data )
    }
    
    function onConnect( status ) {
        var name = 'Strophe XMPP'
        var msg = {}
        msg[ Strophe.Status.CONNECTING ] = name + ' Connecting'
        msg[ Strophe.Status.CONNFAIL ] = name + ' Connect Failed'
        msg[ Strophe.Status.DISCONNECTING ] = name + ' Disconnecting'
        msg[ Strophe.Status.DISCONNECTED ] = name + ' Disconnected'
        msg[ Strophe.Status.CONNECTED ] = name + ' Connected'
        
        log( Strophe.LogLevel.DEBUG,
             msg[ status ] || ( name + ' Unknown:' + status ) )
    }

    var BOSH_SERVICE = 'http://bosh.metajack.im:5280/xmpp-httpbind'
    var connection = new Strophe.Connection( BOSH_SERVICE )
    connection.rawInput = rawInput
    connection.rawOutput = rawOutput

    var $action = $('<button/>')
    var text = { connect : '⟰ Connect ⟰',
                 'break' : '⟱ Break ⟱',
               }
    function connect() {
	if( $action.text() === text['connect'] ) {
	    connection.connect( $('#user').val(),
			        $('#pass').val(),
			        onConnect )

	    $action.text( text['break'] )
	} else if( $action.text() === text['break'] ) {
	    connection.disconnect()
	    $action.text( text['break'] )
	} else {
            log( Strophe.LogLevel.ERROR,
                 'Unknown Action: ' + $action.text() )
        }
        return false
    }
    $action.text( text['connect'] ).click( connect )
    $('#connect').submit( connect )
    $('#connect').find( 'ul, ol' ).eq( 0 ).prepend(
        $('<li/>').append( $action )
    )
} )

// Login defaults
$( function() {
    var text = { 'default' : '⟰  Default ⟰', }
    var $action = $('<button/>').text( text['default'] )
    $('#connect ul').eq( 0 ).append(
        $('<li/>').append( $action )
    )
    
    $action.click( function () {
        var fields = new List( {
            user : 'mimis.test@gmail.com',
            srvr : 'talk.google.com',
            pass : 'mimistest',
        } )
        var $this = $(this)
        fields.__.each( function( val, key ) {
            var $input = $this.parents('#connect').find( '#' + key )
            $input.focus( )
            $input.val( val )
            $input.blur( )
        } )
        return false
    } )
    
    $('#connect input')
        .focus( function() {
            var $label = ( $(this).parents()
                           .find( '[for=' + $(this).attr( 'id' ) + ']' ) )
            var $box = $(this)
            $label.animate( {
                left : -( $box.width() / 2 * 1.1 + $label.width() / 2 ),
            }, speed )
        } )
        .blur( function() {
            if( $(this).val() == '' ) {
                var $label = ( $(this).parents()
                               .find( '[for=' + $(this).attr( 'id' ) + ']' ) )
                $label.animate( {
                    left : 0,
                } )
            }
        }, speed ).hover( 
            function() {
                var $label = ( $(this).parents()
                               .find( '[for=' + $(this).attr( 'id' ) + ']' ) )
                $label.animate( {
                    opacity : 1,
                }, speed )
            },
            function() {
                var $label = ( $(this).parents()
                               .find( '[for=' + $(this).attr( 'id' ) + ']' ) )
                $label.animate( {
                    opacity : .5,
                }, speed )
            }
        )

} )
